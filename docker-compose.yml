version: '3.8'

services:
  # Django application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reborn_api_web
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_TYPE=postgres
    depends_on:
      - mongodb
      - redis
      - elasticsearch
    networks:
      - reborn_network
    restart: always

  # Nginx for serving static files and proxying
  nginx:
    image: nginx:alpine
    container_name: reborn_api_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - web
    networks:
      - reborn_network
    restart: always

  # MongoDB database
  mongodb:
    image: mongo:5.0
    container_name: reborn_api_mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - reborn_network
    restart: always

  # Redis for caching and Celery
  redis:
    image: redis:alpine
    container_name: reborn_api_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - reborn_network
    restart: always

  # Elasticsearch for search
  elasticsearch:
    image: elasticsearch:7.14.0
    container_name: reborn_api_elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - reborn_network
    restart: always

  # Celery worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reborn_api_celery_worker
    command: celery -A core.infrastructure worker -l info
    volumes:
      - .:/app
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_TYPE=postgres
    depends_on:
      - web
      - redis
      - mongodb
    networks:
      - reborn_network
    restart: always

  # Celery beat scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reborn_api_celery_beat
    command: celery -A core.infrastructure beat -l info
    volumes:
      - .:/app
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_TYPE=postgres
    depends_on:
      - web
      - redis
      - mongodb
    networks:
      - reborn_network
    restart: always

  # Flower for monitoring Celery
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reborn_api_flower
    command: celery -A core.infrastructure flower --port=5555
    volumes:
      - .:/app
    ports:
      - "5555:5555"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DATABASE_TYPE=postgres
    depends_on:
      - web
      - redis
      - celery_worker
    networks:
      - reborn_network
    restart: always

networks:
  reborn_network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  elastic_data:
  static_volume:
  media_volume:
