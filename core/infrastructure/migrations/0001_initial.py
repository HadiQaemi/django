# Generated by Django 5.1.9 on 2025-06-19 22:08

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="DataType",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=255)),
                ("see_also", models.CharField(max_length=255)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "db_table": "data_types",
            },
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True)),
                ("article_id", models.CharField(max_length=255, null=True)),
                ("json", models.JSONField(blank=True, null=True)),
                ("name", models.CharField(max_length=255)),
                ("abstract", models.TextField(blank=True, null=True)),
                ("date_published", models.DateTimeField(blank=True, null=True)),
                ("identifier", models.CharField(blank=True, max_length=255, null=True)),
                ("reborn_doi", models.CharField(blank=True, max_length=255, null=True)),
                ("paper_type", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(null=True),
                ),
            ],
            options={
                "db_table": "articles",
            },
        ),
        migrations.CreateModel(
            name="DataItem",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                ("source_url", models.CharField(blank=True, max_length=255, null=True)),
                ("comment", models.CharField(blank=True, max_length=255, null=True)),
                ("source_table", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "data_items",
            },
        ),
        migrations.CreateModel(
            name="JournalConference",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True)),
                ("journal_conference_id", models.CharField(max_length=255, null=True)),
                ("json", models.JSONField(blank=True, null=True)),
                ("label", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=255, null=True)),
            ],
            options={
                "db_table": "journals_conferences",
            },
        ),
        migrations.CreateModel(
            name="Statistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("mean", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "standard_deviation",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ClassDiscovery",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                ("class_discovery_label", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "class_discoveries",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.CreateModel(
            name="CorrelationAnalysis",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                ("correlation_analysis_label", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "correlation_analysis",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.CreateModel(
            name="DataPreprocessing",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                ("data_preprocessing_label", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "data_preprocessing",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.CreateModel(
            name="DescriptiveStatistics",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                ("descriptive_statistics_label", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "descriptive_statistics",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.CreateModel(
            name="FactorAnalysis",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                ("factor_analysis_label", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "factor_analysis",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True)),
                ("author_id", models.CharField(max_length=255, null=True)),
                ("given_name", models.CharField(max_length=255)),
                ("family_name", models.CharField(max_length=255)),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                ("orcid", models.CharField(blank=True, max_length=50, null=True)),
                ("json", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "authors",
                "indexes": [
                    models.Index(fields=["_id"], name="authors__id_29624c_idx"),
                    models.Index(fields=["label"], name="authors_label_f89de0_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="ArticleAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="infrastructure.article",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="infrastructure.author",
                    ),
                ),
            ],
            options={
                "db_table": "articles_authors",
                "ordering": ["order"],
            },
        ),
        migrations.AddField(
            model_name="article",
            name="authors",
            field=models.ManyToManyField(
                blank=True,
                related_name="articles",
                through="infrastructure.ArticleAuthor",
                to="infrastructure.author",
            ),
        ),
        migrations.CreateModel(
            name="Concept",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True)),
                ("concept_id", models.CharField(max_length=255, null=True)),
                ("json", models.JSONField(blank=True, null=True)),
                ("label", models.CharField(max_length=255)),
                ("definition", models.TextField(blank=True, null=True)),
                (
                    "string_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                ("see_also", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "concepts",
                "indexes": [
                    models.Index(fields=["_id"], name="concepts__id_e2fad3_idx"),
                    models.Index(fields=["label"], name="concepts_label_dfa803_idx"),
                ],
            },
        ),
        migrations.AddField(
            model_name="article",
            name="concepts",
            field=models.ManyToManyField(
                blank=True, related_name="articles", to="infrastructure.concept"
            ),
        ),
        migrations.CreateModel(
            name="Constraint",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True, unique=True)),
                ("json", models.JSONField(blank=True, null=True)),
                (
                    "label",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "exact_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "close_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "constraints",
                "indexes": [
                    models.Index(fields=["_id"], name="constraints__id_b2bf28_idx"),
                    models.Index(fields=["label"], name="constraints_label_bdf51b_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Contribution",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("contribution_paper_id", models.CharField(max_length=255)),
                ("json_id", models.CharField(blank=True, max_length=255, null=True)),
                ("json_type", models.CharField(blank=True, max_length=255, null=True)),
                ("json_context", models.JSONField(blank=True, null=True)),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("author", models.JSONField(blank=True, null=True)),
                ("info", models.JSONField(blank=True, null=True)),
                ("predicates", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "contributions",
                "indexes": [
                    models.Index(
                        fields=["contribution_paper_id"],
                        name="contributio_contrib_b46a03_idx",
                    ),
                    models.Index(
                        fields=["json_id"], name="contributio_json_id_bb89bd_idx"
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="datatype",
            name="has_inputs",
            field=models.ManyToManyField(
                blank=True,
                db_index=True,
                related_name="input_data",
                to="infrastructure.dataitem",
            ),
        ),
        migrations.AddField(
            model_name="datatype",
            name="has_outputs",
            field=models.ManyToManyField(
                blank=True,
                db_index=True,
                related_name="output_data",
                to="infrastructure.dataitem",
            ),
        ),
        migrations.CreateModel(
            name="DataItemComponent",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                ("see_also", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "data_item_components",
                "indexes": [
                    models.Index(fields=["id"], name="data_item_c_id_8e5395_idx")
                ],
            },
        ),
        migrations.AddField(
            model_name="dataitem",
            name="has_part",
            field=models.ManyToManyField(
                blank=True,
                db_index=True,
                related_name="data_item",
                to="infrastructure.dataitemcomponent",
            ),
        ),
        migrations.CreateModel(
            name="Figure",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.TextField(blank=True, null=True)),
                ("source_url", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "figures",
                "indexes": [models.Index(fields=["id"], name="figures_id_a5d216_idx")],
            },
        ),
        migrations.AddField(
            model_name="dataitem",
            name="has_expression",
            field=models.ManyToManyField(
                blank=True,
                db_index=True,
                related_name="data_item",
                to="infrastructure.figure",
            ),
        ),
        migrations.CreateModel(
            name="Identifier",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True)),
                ("identifier_value", models.CharField(max_length=255)),
                (
                    "entity_type",
                    models.CharField(
                        choices=[
                            ("concept", "Concept"),
                            ("research_field", "ResearchField"),
                            ("author", "Author"),
                            ("publisher", "Publisher"),
                            ("journal_conference", "JournalConference"),
                            ("article", "Article"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "identifier_type",
                    models.CharField(
                        choices=[
                            ("uuid", "UUID"),
                            ("external_id", "External ID"),
                            ("doi", "DOI"),
                        ],
                        default="doi",
                        max_length=50,
                    ),
                ),
                ("entity_id", models.PositiveBigIntegerField()),
            ],
            options={
                "verbose_name": "Identifier",
                "verbose_name_plural": "Identifiers",
                "db_table": "identifiers",
                "indexes": [
                    models.Index(fields=["_id"], name="identifiers__id_6cc599_idx"),
                    models.Index(
                        fields=["identifier_value"],
                        name="identifiers_identif_4e207f_idx",
                    ),
                    models.Index(
                        fields=["entity_type", "entity_id"],
                        name="identifiers_entity__3398d3_idx",
                    ),
                ],
                "unique_together": {("entity_type", "entity_id", "identifier_type")},
            },
        ),
        migrations.AddField(
            model_name="article",
            name="journal_conference",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="articles",
                to="infrastructure.journalconference",
            ),
        ),
        migrations.CreateModel(
            name="MartixSize",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "number_rows",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "number_columns",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "martix_sizes",
                "indexes": [
                    models.Index(fields=["id"], name="martix_size_id_285427_idx")
                ],
            },
        ),
        migrations.AddField(
            model_name="dataitem",
            name="has_characteristic",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data_item",
                to="infrastructure.martixsize",
            ),
        ),
        migrations.CreateModel(
            name="Matrix",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True, unique=True)),
                ("json", models.JSONField(blank=True, null=True)),
                (
                    "label",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "type",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "exact_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "close_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "matrices",
                "indexes": [
                    models.Index(fields=["_id"], name="matrices__id_eb1d71_idx"),
                    models.Index(fields=["label"], name="matrices_label_854779_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="ObjectOfInterest",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True, unique=True)),
                ("json", models.JSONField(blank=True, null=True)),
                (
                    "label",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "type",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "exact_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "close_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "object_of_interests",
                "indexes": [
                    models.Index(fields=["_id"], name="object_of_i__id_419523_idx"),
                    models.Index(fields=["label"], name="object_of_i_label_c3467d_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Operation",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True, unique=True)),
                ("json", models.JSONField(blank=True, null=True)),
                (
                    "label",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "exact_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "close_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "operations",
                "indexes": [
                    models.Index(fields=["_id"], name="operations__id_27a070_idx"),
                    models.Index(fields=["label"], name="operations_label_8f11d6_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Property",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True, unique=True)),
                ("json", models.JSONField(blank=True, null=True)),
                (
                    "label",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "exact_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "close_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "properties",
                "indexes": [
                    models.Index(fields=["_id"], name="properties__id_5965b6_idx"),
                    models.Index(fields=["label"], name="properties_label_6b6498_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Component",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True, unique=True)),
                ("label", models.CharField(max_length=255, null=True)),
                ("json", models.JSONField(blank=True, null=True)),
                (
                    "string_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "exact_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "close_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "type",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "matrices",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="components",
                        to="infrastructure.matrix",
                    ),
                ),
                (
                    "object_of_interests",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="components",
                        to="infrastructure.objectofinterest",
                    ),
                ),
                (
                    "properties",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="components",
                        to="infrastructure.property",
                    ),
                ),
            ],
            options={
                "db_table": "components",
            },
        ),
        migrations.CreateModel(
            name="Publisher",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True)),
                ("publisher_id", models.CharField(max_length=255, null=True)),
                ("json", models.JSONField(blank=True, null=True)),
                ("label", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "publishers",
                "indexes": [
                    models.Index(fields=["_id"], name="publishers__id_9a496d_idx"),
                    models.Index(fields=["label"], name="publishers_label_37c529_idx"),
                ],
            },
        ),
        migrations.AddField(
            model_name="journalconference",
            name="publisher",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="journals_conferences",
                to="infrastructure.publisher",
            ),
        ),
        migrations.AddField(
            model_name="article",
            name="publisher",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="articles",
                to="infrastructure.publisher",
            ),
        ),
        migrations.CreateModel(
            name="ResearchField",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True)),
                ("research_field_id", models.CharField(max_length=255, null=True)),
                ("label", models.CharField(max_length=255)),
                ("json", models.JSONField(blank=True, null=True)),
            ],
            options={
                "db_table": "research_fields",
                "indexes": [
                    models.Index(fields=["_id"], name="research_fi__id_797a8d_idx"),
                    models.Index(fields=["label"], name="research_fi_label_234300_idx"),
                ],
            },
        ),
        migrations.AddField(
            model_name="journalconference",
            name="research_fields",
            field=models.ManyToManyField(
                blank=True,
                related_name="journals_conferences",
                to="infrastructure.researchfield",
            ),
        ),
        migrations.AddField(
            model_name="article",
            name="research_fields",
            field=models.ManyToManyField(
                blank=True, related_name="articles", to="infrastructure.researchfield"
            ),
        ),
        migrations.CreateModel(
            name="SchemaType",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("type_id", models.CharField(max_length=255, unique=True)),
                ("schema_data", models.JSONField()),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "property",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "schemata",
                "indexes": [
                    models.Index(
                        fields=["type_id"], name="schemata_type_id_be3b12_idx"
                    ),
                    models.Index(
                        fields=["last_updated"], name="schemata_last_up_e826b6_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SeeAlso",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True, unique=True)),
                ("label", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "db_table": "see_alsos",
                "indexes": [
                    models.Index(fields=["_id"], name="see_alsos__id_d4758d_idx"),
                    models.Index(fields=["label"], name="see_alsos_label_dd8e3a_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="SharedType",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                ("type", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "see_also",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "shared_types",
                "indexes": [
                    models.Index(fields=["id"], name="shared_type_id_05b5fe_idx"),
                    models.Index(fields=["label"], name="shared_type_label_8e78f5_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Software",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "version_info",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "has_support_url",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "db_table": "softwares",
                "indexes": [
                    models.Index(fields=["id"], name="softwares_id_be8100_idx"),
                    models.Index(fields=["label"], name="softwares_label_d1d359_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="SoftwareLibrary",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "version_info",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "has_support_url",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "part_of",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="part_of_software",
                        to="infrastructure.software",
                    ),
                ),
            ],
            options={
                "db_table": "software_libraries",
            },
        ),
        migrations.CreateModel(
            name="SoftwareMethod",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "is_implemented_by",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "has_support_url",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "part_of",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="software_methods",
                        to="infrastructure.softwarelibrary",
                    ),
                ),
            ],
            options={
                "db_table": "software_methods",
            },
        ),
        migrations.AddField(
            model_name="datatype",
            name="executes",
            field=models.ManyToManyField(
                blank=True,
                db_index=True,
                related_name="software_method",
                to="infrastructure.softwaremethod",
            ),
        ),
        migrations.CreateModel(
            name="Statement",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True)),
                ("statement_id", models.CharField(max_length=255, null=True)),
                ("json", models.JSONField(blank=True, null=True)),
                ("content", models.JSONField(blank=True, null=True)),
                ("version", models.CharField(max_length=255, null=True)),
                ("encodingFormat", models.CharField(max_length=255, null=True)),
                ("name", models.CharField(max_length=255, null=True)),
                ("label", models.CharField(blank=True, null=True)),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(null=True),
                ),
                (
                    "article",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statements",
                        to="infrastructure.article",
                    ),
                ),
                (
                    "authors",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="statements",
                        to="infrastructure.author",
                    ),
                ),
                (
                    "components",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="statements",
                        to="infrastructure.component",
                    ),
                ),
                (
                    "concepts",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="statements",
                        to="infrastructure.concept",
                    ),
                ),
            ],
            options={
                "db_table": "statements",
            },
        ),
        migrations.CreateModel(
            name="Implement",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("url", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "statement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="implement_statements",
                        to="infrastructure.statement",
                    ),
                ),
            ],
            options={
                "db_table": "implements",
            },
        ),
        migrations.CreateModel(
            name="HasPart",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                ("type", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "schema_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="has_parts",
                        to="infrastructure.schematype",
                    ),
                ),
                (
                    "statement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="has_part_statements",
                        to="infrastructure.statement",
                    ),
                ),
            ],
            options={
                "db_table": "has_parts",
            },
        ),
        migrations.AddField(
            model_name="datatype",
            name="statement",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data_type_statement",
                to="infrastructure.statement",
            ),
        ),
        migrations.CreateModel(
            name="Unit",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("_id", models.CharField(max_length=255, null=True, unique=True)),
                ("json", models.JSONField(blank=True, null=True)),
                (
                    "type",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "label",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "exact_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "close_match",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "units",
                "indexes": [
                    models.Index(fields=["_id"], name="units__id_963c7e_idx"),
                    models.Index(fields=["label"], name="units_label_2e6f3b_idx"),
                ],
            },
        ),
        migrations.AddField(
            model_name="component",
            name="units",
            field=models.ManyToManyField(
                blank=True,
                db_index=True,
                related_name="components",
                to="infrastructure.unit",
            ),
        ),
        migrations.CreateModel(
            name="AlgorithmEvaluation",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                (
                    "evaluate",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evaluate",
                        to="infrastructure.sharedtype",
                    ),
                ),
                (
                    "evaluates_for",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evaluates_for",
                        to="infrastructure.sharedtype",
                    ),
                ),
            ],
            options={
                "db_table": "algorithm_evaluations",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.CreateModel(
            name="ClassPrediction",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                (
                    "targets",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="class_predictions",
                        to="infrastructure.sharedtype",
                    ),
                ),
            ],
            options={
                "db_table": "class_predictions",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.CreateModel(
            name="GroupComparison",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                (
                    "targets",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="group_comparisons",
                        to="infrastructure.sharedtype",
                    ),
                ),
            ],
            options={
                "db_table": "group_comparisons",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.CreateModel(
            name="MultilevelAnalysis",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                (
                    "level",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="level_multilevel_analysis",
                        to="infrastructure.sharedtype",
                    ),
                ),
                (
                    "targets",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="targets_multilevel_analysis",
                        to="infrastructure.sharedtype",
                    ),
                ),
            ],
            options={
                "db_table": "multilevel_analysis",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.CreateModel(
            name="RegressionAnalysis",
            fields=[
                (
                    "datatype_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="infrastructure.datatype",
                    ),
                ),
                (
                    "targets",
                    models.ManyToManyField(
                        blank=True,
                        db_index=True,
                        related_name="regression_analysis",
                        to="infrastructure.sharedtype",
                    ),
                ),
            ],
            options={
                "db_table": "regression_analysis",
            },
            bases=("infrastructure.datatype",),
        ),
        migrations.AddIndex(
            model_name="dataitem",
            index=models.Index(fields=["id"], name="data_items_id_28ce59_idx"),
        ),
        migrations.AddIndex(
            model_name="journalconference",
            index=models.Index(fields=["_id"], name="journals_co__id_98caea_idx"),
        ),
        migrations.AddIndex(
            model_name="journalconference",
            index=models.Index(fields=["label"], name="journals_co_label_b97d00_idx"),
        ),
        migrations.AddIndex(
            model_name="article",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="articles_search__3b8987_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(fields=["name"], name="articles_name_f8826b_idx"),
        ),
        migrations.AddIndex(
            model_name="softwarelibrary",
            index=models.Index(fields=["id"], name="software_li_id_bd34bf_idx"),
        ),
        migrations.AddIndex(
            model_name="softwarelibrary",
            index=models.Index(fields=["label"], name="software_li_label_7158e2_idx"),
        ),
        migrations.AddIndex(
            model_name="softwaremethod",
            index=models.Index(fields=["id"], name="software_me_id_337365_idx"),
        ),
        migrations.AddIndex(
            model_name="softwaremethod",
            index=models.Index(fields=["label"], name="software_me_label_d7a52e_idx"),
        ),
        migrations.AddIndex(
            model_name="statement",
            index=models.Index(fields=["_id"], name="statements__id_36075c_idx"),
        ),
        migrations.AddIndex(
            model_name="statement",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="statements_search__3e5a6d_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="implement",
            index=models.Index(fields=["id"], name="implements_id_103e48_idx"),
        ),
        migrations.AddIndex(
            model_name="implement",
            index=models.Index(
                fields=["statement_id"], name="implements_stateme_707db3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="haspart",
            index=models.Index(fields=["id"], name="has_parts_id_176cdd_idx"),
        ),
        migrations.AddIndex(
            model_name="haspart",
            index=models.Index(
                fields=["statement_id"], name="has_parts_stateme_8274ea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datatype",
            index=models.Index(fields=["id"], name="data_types_id_0a4474_idx"),
        ),
        migrations.AddIndex(
            model_name="datatype",
            index=models.Index(fields=["label"], name="data_types_label_7f33d1_idx"),
        ),
        migrations.AddIndex(
            model_name="component",
            index=models.Index(fields=["_id"], name="components__id_aa537f_idx"),
        ),
    ]
